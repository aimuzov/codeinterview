const { skillcheckThrottle } = require("./task-5")

describe("throttle", () => {
	let f1000
	let log = ""

	function f(a) {
		log += a
	}

	beforeEach(() => {
		f1000 = skillcheckThrottle(f, 1000)
	})

	afterEach(() => {
		log = ""
	})

	it("1-й вызов происходит немедленно", function () {
		f1000(1) // вызов происходит немедленно
		expect(log).toBe("1")
	})

	it("далее вызовы игнорируются до истечения 1с от последнего вызова", async () => {
		f1000(1) // вызов происходит немедленно
		expect(log).toBe("1") // прямо сейчас только 1-й вызов завершён

		f1000(2) // задержка менее 1000 мс с момента последнего вызова, вызов игнорируется
		expect(log).toBe("1") // прямо сейчас только 1-й вызов завершён

		f1000(3) // задержка менее 1000 мс с момента последнего вызова
		expect(log).toBe("1") // прямо сейчас только 1-й вызов завершён

		// запланирован вызов спустя f(3) 1000 мс
		await delay(1000)

		f1000(4) // вызовыется так как прошло больше 1 секунды
		expect(log).toBe("14") // log === '14', произошёл вызов f1000(3)
	})

	it("игнорируется 2-ой вызов, ждет 1 с от 1-го", async () => {
		f1000(1) // вызов происходит немедленно
		expect(log).toBe("1")

		await delay(500)

		f1000(2) // задержка менее 1000 мс с момента последнего вызова, вызов игнорируется
		expect(log).toBe("1")

		await delay(500)

		f1000(3) // задержка менее 1000 мс с момента последнего вызова
		expect(log).toBe("13")
	})
})
